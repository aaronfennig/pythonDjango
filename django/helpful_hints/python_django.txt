
A Django Virtual Environment

Let's create a new virtual environment for our Django projects. We'll need to do this just once. Create and navigate to a folder named my_environments and run the appropriate commands to create a virtual environment and then install Django:

Create your environment:

------------------------------------------------------------------
| Mac/Linux: | python3 -m venv djangoPy3Env 
-------------+----------------------------------------------------
| Windows (command prompt): | python -m venv djangoPy3Env
>------------------------------------------------------------------
Activate your environment:

------------------------------------------------------------------
| Mac/Linux: | source djangoPy3Env/bin/activate                         
------------------------------------------------------------------
| Windows (command prompt): | call djangoPy3Env\Scripts\activate       
------------------------------------------------------------------
| Windows (git bash) : | source djangoPy3Env/Scripts/activate         
------------------------------------------------------------------
Install Django:

(djangoPy3Env) Windows/Mac:| pip install Django==2.2.4




********************************************** START A NEW PROJECT ************************************************************

1. With our Django virtual environment activated, create a new Django project. First navigate to where you want the project to be saved (for these first few assignments, that will be the python_stack/django/django_intro folder). Then run this command, specifying a project name of our choosing:

	>> cd python_stack/django/django_intro
	>> django-admin startproject your_project_name_here

Let's test this out:
Navigate into the folder that was just created. A new Django project has just been created--let's run it!

	>> cd your_project_name_here
	>> python manage.py runserver

Open localhost:8000 in a browser window. Hooray for CLIs (command-line interfaces)!

2. For every app we want to add to our project, we'll do the following:
	
	A. >>cd your_project_name (there is another folder inside of the folder of your project folder. it is also called whatever you called your project. do not cd into this second folder that has the same name) Your apps can live anywhere on your Python path. In this tutorial, we’ll create our app right next to your manage.py file so that 	it 	can be imported as its own top-level module, rather than a submodule of mysite.
	
	>>python manage.py startapp your_app_name_here
		!!!!!!! The apps in a project CANNOT have the same name as the project !!!!!!!!!!!!!!!!!

 B. In the text editor, find the settings.py file. It should be in a folder with the same name as our project. Find the variable INSTALLED_APPS, and let's add our newly created app:

your_project_name_here/your_project_name_here/settings.py

   INSTALLED_APPS = [
       'your_app_name_here', # added this line. Don't forget the comma!!
       'django.contrib.admin',
       'django.contrib.auth',
       'django.contrib.contenttypes',
       'django.contrib.sessions',
       'django.contrib.messages',
       'django.contrib.staticfiles',
   ]    # the trailing comma after the last item in a list, tuple, or dictionary is commonly accepted in Python

C. For these next few steps, we are creating the route "/" to be associated with a specific function. Trust for now--we'll break this down in greater detail in the next tab. In the urls.py file, add a URL pattern for your new app. (You can delete the current admin pattern, or just ignore it for now). You will need to add an import for your views file.

your_project_name_here/your_project_name_here/urls.py

from django.urls import path, include           # import include
# from django.contrib import admin              # comment out, or just delete
urlpatterns = [
    path('', include('your_app_name_here.urls')),	   
    # path('admin/', admin.sites.urls)         # comment out, or just delete
]
------------urls.py----------------------------
     SHOULD LOOK LIKE THIS:
	from django.urls import path, include

	urlpatterns = [
    		path('', include('app_one'))
	]
-------------------------------------------------

D. Next, let's create a new urls.py file in the your_app_name_here folder. Put the following code
--------------your_project_name_here/your_app_name_here/urls.py-----------------
	from django.urls import path     
	from . import views
	urlpatterns = [
    		path('', views.index),	   
	]
-----------------------------------------------------------------------------

  And then actually put a function called index in our app's views.py file:
-----------------your_project_name/your_app_name/views.py-------------------------
	from django.shortcuts import render, HttpResponse
	def index(request):
    		return HttpResponse("this is the equivalent of @app.route('/')!")
---------------------------------------------------------------------------------

3. Let's run our app again and check it out at localhost:8000/. Whew. We've done it!

	your_project_name_here> python manage.py runserver

*************************----------------------MIGRATIONS------------------------****************************************************
                       THIS MUST BE DONE TO EVERY PROJECT BUILT WITH DJANGO THAT USES SESSION (if a DB is being useed, skip this step and and continue on to migrate a new schema)

	IN THE TERMINAL, CD INTO THE MAIN PROJECT FOLDER, BUT NOT INTO THE APPS FOLDER, AND RUN THIS SCRIPT

	python manage.py migrate

********************EXAMPLE MODEL**********************************

from django.db import models
    
class Movie(models.Model):
    title = models.CharField(max_length=45)
    description = models.TextField()
    release_date = models.DateTimeField()
    duration = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


***************MIGRATE A NEW SCHEMA***************************

AFTER YOU HAVE MADE AND SAVED THE MODELS/SCHEMA IN THE MODELS.PY

	cd into the main project directory
		python manage.py makemigrations
		python manage.py migrate      (this handles default migrations, and the one(s) we just created)
		

	to interact with the models within the shell type:
		python manage.py shell


***INSIDE OF THE SHELL(>>>)***

	>>>from name_of_app.models import name_of_model

NOW WE CAN MAKE SQL QUERIES WITH THE DJANGO BUILT IN SQL ORM COMMANDS   

e.g.
>>>from movie_app.models import Movie
	>>>Movie.objects.all()   # an empty db will return <QuerySet []>
	>>>name_of_model.objects.create(title = "A Few Good Men", description = "A good movie", release_date = "1992-01-01", duration = 120)
	>>>Movie.objects.all()   # will now return <[QuerySet <Movie: Movie object (1)>]>
	>>>Movie.objects.first().__dict__     # this will return an array of dictionaries containing all movies in the DB  [{0}, {1}, {2},...]



*************************MAKING CHANGES TO THE MODEL*********************************************************

Option 1
This is the quickest, simplest option. Type 1 and hit enter. You'll then see a prompt that asks what value you would like:

The value you provide should be compatible with the field type: type the value next to the >>> and hit enter. For example, if it's a CharField, you should provide a string (eg. "no value" or ""). For an IntegerField, provide a number value (eg. 0). Hint: for a DateField or DateTimeField, read the message above the >>> prompt!

The only exception is for a ForeignKeyField--the command line tool doesn't really allow for complex imports and retrievals, so you can actually specify a value for that field's primary key. In our case, that will be an integer.

Once done, don't forget to run migrate!



Option 2
If you know you want to provide a default value for any existing and potentially future entries for this new field in your table, type 2 and hit enter. In your model, revise the new field by adding a default argument and value. You might also consider setting the field to be nullable, if that field is optional. For example:

age = models.IntegerField(default=200)	# if no age is entered for a new/existing, age will be set to 200
age = models.IntegerField(null=True)	# if no age is provided, the field will remain empty



Option 3 - Everything's broken, I have no options left
If you have tried everything and hit a brick wall with your database, or corrupted your data beyond repair, as a last-ditch effort you can delete your database and start over from scratch. To do this, you will need to delete the following files/directories:

db.sqlite3
your_app_name/migrations
your_app_name/__pycache__
After you delete these, you will need to re-run your makemigrations and migrate commands. When you make your migrations, you will need to include the app name:

python manage.py makemigrations your_app_name
python manage.py migrate
IMPORTANT: There is a reason that this is so difficult to do! Databases should as a rule never be deleted after creation, as this interferes with the reliability of your trusted data source. We typically want to store any changes ever made to a database so that we can audit it at any time, so this should only be used in an emergency. 

