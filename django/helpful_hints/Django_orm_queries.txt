In [9]: User.objects.all()
Out[9]: <QuerySet [<User: User object (1)>]>

In [10]: User.objects.all().first()
Out[10]: <User: User object (1)>

In [11]: User.objects.first.__dict__
Out[11]: {}

In [12]: User.objects.first().__dict__
Out[12]:
{'_state': <django.db.models.base.ModelState at 0x1e5d545d518>,
 'id': 1,
 'first_name': 'Aaron',
 'last_name': 'Fennig',
 'email_address': 'user06421@gmail.com',
 'age': 39,
 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>),
 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}

In [13]: User.objects.create(first_name = "Joseph", last_name = "Fennig", email_address = "jsfennig@gma
    ...: il.com", age = 74)
Out[13]: <User: User object (2)>

In [14]: User.objects.create(first_name = "Jessica", last_name = "Franks", email_address = "jfranks@hma
    ...: il.com", age = 38)
Out[14]: <User: User object (3)>

In [15]: User.objects.all().__dict__
Out[15]:
{'model': app.models.User,
 '_db': None,
 '_hints': {},
 'query': <django.db.models.sql.query.Query at 0x1e5d54a8278>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None}

In [16]: User.objects.__dict__
Out[16]:
{'_constructor_args': ((), {}),
 'creation_counter': 0,
 'model': app.models.User,
 'name': 'objects',
 '_db': None,
 '_hints': {},
 'auto_created': True}

In [17]: Movie.objects
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-17-1ddb8eee4309> in <module>
----> 1 Movie.objects

NameError: name 'Movie' is not defined

In [18]: User.objects
Out[18]: <django.db.models.manager.Manager at 0x1e5d535e278>

In [19]: User.objects.all
Out[19]: <bound method BaseManager.all of <django.db.models.manager.Manager object at 0x000001E5D535E278>>

In [20]: User.objects.all()
Out[20]: <QuerySet [<User: User object (1)>, <User: User object (2)>, <User: User object (3)>]>

In [21]: User.objects.all().__dict__
Out[21]:
{'model': app.models.User,
 '_db': None,
 '_hints': {},
 'query': <django.db.models.sql.query.Query at 0x1e5d5510a58>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None}

In [22]: User.objects.get
Out[22]: <bound method BaseManager._get_queryset_methods.<locals>.create_method.<locals>.manager_method of <django.db.models.manager.Manager object at 0x000001E5D535E278>>

In [23]: all_users = User.objects.all()

In [24]: for each in all_users:
    ...:     print(each.first_name, each.last_name, each.email_address, each.age)
    ...:
Aaron Fennig user06421@gmail.com 39
Joseph Fennig jsfennig@gmail.com 74
Jessica Franks jfranks@hmail.com 38

In [25]: for each in all_users:
    ...:     print(each)
    ...:
User object (1)
User object (2)
User object (3)

In [26]:

In [26]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8940>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Fennig', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8908>, 'id': 2, 'first_name': 'Joseph', 'last_name': 'Fennig', 'email_address': 'jsfennig@gmail.com', 'age': 74, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A89B0>, 'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [27]: User.objects.last().__dict__
Out[27]:
{'_state': <django.db.models.base.ModelState at 0x1e5d56d5160>,
 'id': 3,
 'first_name': 'Jessica',
 'last_name': 'Franks',
 'email_address': 'jfranks@hmail.com',
 'age': 38,
 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>),
 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [28]: User.objects.first().__dict__
Out[28]:
{'_state': <django.db.models.base.ModelState at 0x1e5d535ef98>,
 'id': 1,
 'first_name': 'Aaron',
 'last_name': 'Fennig',
 'email_address': 'user06421@gmail.com',
 'age': 39,
 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>),
 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}

In [29]: user_to_update = User.objects.get(id=1)

In [30]: user_to_update.last_name = "Pancakes"

In [31]: print(user_to_update)
User object (1)

In [32]: print(user_to_update.__dict__)
{'_state': <django.db.models.base.ModelState object at 0x000001E5D51FFF60>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}

In [33]: user_to_update.save()

In [34]: print(user_to_update.__dict__)
{'_state': <django.db.models.base.ModelState object at 0x000001E5D51FFF60>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}

In [35]: User.objects.get(id=2).delete()
Out[35]: (1, {'app.User': 1})

In [36]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8940>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Fennig', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8908>, 'id': 2, 'first_name': 'Joseph', 'last_name': 'Fennig', 'email_address': 'jsfennig@gmail.com', 'age': 74, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A89B0>, 'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [37]: User.objects.get(id=2).delete()
---------------------------------------------------------------------------
DoesNotExist                              Traceback (most recent call last)
<ipython-input-37-8fdde473509b> in <module>
----> 1 User.objects.get(id=2).delete()

~\ContinuingEducation\LearningPlatform\python_django\django\django_orm\djangoORM\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

~\ContinuingEducation\LearningPlatform\python_django\django\django_orm\djangoORM\lib\site-packages\django\db\models\query.py in get(self, *args, **kwargs)
    406             raise self.model.DoesNotExist(
    407                 "%s matching query does not exist." %
--> 408                 self.model._meta.object_name
    409             )
    410         raise self.model.MultipleObjectsReturned(

DoesNotExist: User matching query does not exist.

In [38]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8940>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Fennig', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A8908>, 'id': 2, 'first_name': 'Joseph', 'last_name': 'Fennig', 'email_address': 'jsfennig@gmail.com', 'age': 74, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 7, 559769, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D54A89B0>, 'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [39]: ******because all_users was asaved before the deletion. the deletion did work**********
  File "<ipython-input-39-588ea109b09d>", line 1
    ******because all_users was asaved before the deletion. the deletion did work**********
     ^
SyntaxError: invalid syntax


In [40]: #******because all_users was asaved before the deletion. the deletion did work**********

In [41]: all_users = User.objects.all

In [42]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-42-7cebb3a74d7c> in <module>
----> 1 for each in all_users:
      2     print(each.__dict__)
      3
      4

TypeError: 'method' object is not iterable

In [43]: all_users = User.objects.all()

In [44]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
{'_state': <django.db.models.base.ModelState object at 0x000001E5D572FBE0>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D57177B8>, 'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [45]: for each in all_users:
    ...:     print(each.__dict__)
    ...:
    ...:
{'_state': <django.db.models.base.ModelState object at 0x000001E5D572FBE0>, 'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}
{'_state': <django.db.models.base.ModelState object at 0x000001E5D57177B8>, 'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}

In [46]: find_user = User.objects.filter(last_name = "Franks")

In [47]: find_user.__dict__
Out[47]:
{'model': app.models.User,
 '_db': None,
 '_hints': {},
 'query': <django.db.models.sql.query.Query at 0x1e5d5736128>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None}

In [48]: print(find_user)
<QuerySet [<User: User object (3)>]>

In [49]: find_user.__dict__
Out[49]:
{'model': app.models.User,
 '_db': None,
 '_hints': {},
 'query': <django.db.models.sql.query.Query at 0x1e5d5736128>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None}

In [50]: find_user.__dict__
Out[50]:
{'model': app.models.User,
 '_db': None,
 '_hints': {},
 'query': <django.db.models.sql.query.Query at 0x1e5d5736128>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None}

In [51]: print(find_user)
<QuerySet [<User: User object (3)>]>

In [52]: print(find_user)
<QuerySet [<User: User object (3)>]>

In [53]: find_user.__str__()
Out[53]: '<QuerySet [<User: User object (3)>]>'

In [54]: find_user.__str__
Out[54]: <method-wrapper '__str__' of QuerySet object at 0x000001E5D5736160>

In [55]: find_user.__str__()
Out[55]: '<QuerySet [<User: User object (3)>]>'

In [56]: User.objects.all().__str__()
Out[56]: '<QuerySet [<User: User object (1)>, <User: User object (3)>]>'

In [57]: User.objects.all().__str__()
Out[57]: '<QuerySet [<User: User object (1)>, <User: User object (3)>]>'

In [58]: print(find_user)
<QuerySet [<User: User object (3)>]>


(djangoORM) C:\Users\Aaron\ContinuingEducation\LearningPlatform\python_django\django\django_orm\users>python manage.py shell
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.16.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: print(find_user)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-47d20bdb5d67> in <module>
----> 1 print(find_user)

NameError: name 'find_user' is not defined

In [2]: from app.models import User

In [3]: print(find_user)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-3-47d20bdb5d67> in <module>
----> 1 print(find_user)

NameError: name 'find_user' is not defined

In [4]: User.objects.all().__str__()
Out[4]: '<QuerySet [<User: <User object:1 Aaron (Pancakes user06421@gmail.com 39)>>, <User: <User object:3 Jessica (Franks jfranks@hmail.com 38)>>]>'

In [5]: #i added the following method to the User class and rebooted the shell, so now i get what i put
   ...:  in the __str__ method when i call my objects with the .__str__() method

In [6]: #class Movie(models.Model):
   ...:     # fields removed for brevity
   ...:     def __str__(self):
   ...:         return f"<Movie object: {self.title} ({self.id})>"

In [7]: User.objects.all().values()
Out[7]: <QuerySet [{'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}]>

In [8]: User.objects.all().values().order_by("first_name")
Out[8]: <QuerySet [{'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}]>

In [9]: User.objects.all().values().order_by("last_name")
Out[9]: <QuerySet [{'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}, {'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}]>

In [10]: User.objects.all().values().order_by(-"last_name")
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-10-e9d3c7cfe3e9> in <module>
----> 1 User.objects.all().values().order_by(-"last_name")

TypeError: bad operand type for unary -: 'str'

In [11]: User.objects.all().values().order_by("-last_name")
Out[11]: <QuerySet [{'id': 1, 'first_name': 'Aaron', 'last_name': 'Pancakes', 'email_address': 'user06421@gmail.com', 'age': 39, 'created_at': datetime.datetime(2021, 6, 3, 22, 26, 49, 521127, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 18, 14, 948477, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Jessica', 'last_name': 'Franks', 'email_address': 'jfranks@hmail.com', 'age': 38, 'created_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 6, 4, 1, 4, 59, 648469, tzinfo=<UTC>)}]>
